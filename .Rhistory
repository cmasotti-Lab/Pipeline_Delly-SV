#==============================================================================#
tab1 <- reshape2::melt(tab1,id=colnames(tab1[,1:which(names(tab1)== "FORMAT")]))
colnames(tab1)[colnames(tab1) == "variable"] <- "SAMPLE"
unique(tab1$FORMAT) #GT:GL:GQ:FT:RCL:RC:RCR:RDCN:DR:DV:RR:RV
FORMAT<-strsplit(unique(tab1$FORMAT), ":")[[1]]
tab2<- separate(data = tab1, col = value, into =FORMAT, sep = ":")
table(tab2$GT)
tab2 <- tab2[!grepl("^0/0", tab2$GT),]
tab2 <- tab2[!grepl("^0\\|0", tab2$GT),]
tab2 <- tab2[!grepl("^\\./\\.", tab2$GT),]
table(tab2$GT)
remove(all.sv, tab1)
gc()
#==============================================================================#
### SEPARAR OS ALELOS DE CADA INDIVIDUO
#==============================================================================#
setDT(tab2)[,paste0("GT", 1:2) := tstrsplit(GT, "/")]
tab2$ALL <- substr(tab2$index, 1, 3)
table(tab2$ALL)
table(tab2$GT)
#==============================================================================#
### AMOSTRAS EXCLUIDAS POR DADOS CLINICOS
#==============================================================================#
tab2$SAMPLE <- gsub("\\.", "-", tab2$SAMPLE)
samples.excl <- c('ROP-116','ROP-118','ROP-120','ROP-121','ROP-122','ROP-123','ROP-125','ROP-126',
'ROP-127','ROP-130','ROP-131','ROP-132','ROP-23','ROP-84', 'ROP-81','ROP-91','ROP-129')
#                 'ROP-83','ROP-107',)
samples.exclude <-paste(samples.excl, collapse = "|" )
tab2 <- tab2[!grepl(samples.exclude, tab2$SAMPLE),]
tab.info <- as.data.frame(tab2$INFO)
#==============================================================================#
### SELECIONAR OS PRECISE & PASS
#==============================================================================#
tab3 <- tab2[grepl("^PRECISE", tab2$INFO),]
table(tab3$ALL)
tab3 <- subset(tab3, FT == "PASS")
table(tab3$ALL)
# Removendo mutações compartilhadas >=2
#==============================================================================#
aux <- data.frame(table(tab3$index))
tab3 <- merge(tab3, aux, by.x = "index", by.y = "Var1")
colnames(tab3)[names(tab3)=="Freq"]<-"MUTATION_shared"
shared2exclude <- which((tab3$MUTATION_shared >= 2) )
nrow(unique(tab3[shared2exclude,"index"]))  #8565
tab3excl <- tab3[shared2exclude,]
tab3 <- tab3[-shared2exclude,]
table(tab3$ALL)
# Remover DEL em região: "intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream"
#==============================================================================#
data.table(table(tab3[tab3$ALL == "DEL",]$Func.refGene))
unique(tab3[tab3$ALL == "DEL",]$Func.refGene)
tab4 <- subset(tab3, !(SV == "DEL" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
#==============================================================================#
#            IMPORTANTE           ####
# APLICAR FILTRO PARA DUP, INV e INS ?
tab4 <- subset(tab4, !(SV == "DUP" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
#==============================================================================#
### SELECIONAR OS PRECISE & PASS
#==============================================================================#
tab3 <- tab2[grepl("^PRECISE", tab2$INFO),]
table(tab3$ALL)
tab3 <- subset(tab3, FT == "PASS")
table(tab3$ALL)
# Removendo mutações compartilhadas >=2
#==============================================================================#
aux <- data.frame(table(tab3$index))
tab3 <- merge(tab3, aux, by.x = "index", by.y = "Var1")
colnames(tab3)[names(tab3)=="Freq"]<-"MUTATION_shared"
shared2exclude <- which((tab3$MUTATION_shared >= 2) )
nrow(unique(tab3[shared2exclude,"index"]))  #8565
tab3excl <- tab3[shared2exclude,]
tab3 <- tab3[-shared2exclude,]
table(tab3$ALL)
table(tab3$ALL)
# Remover DEL em região: "intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream"
#==============================================================================#
data.table(table(tab3[tab3$ALL == "DEL",]$Func.refGene))
unique(tab3[tab3$ALL == "DEL",]$Func.refGene)
tab4 <- subset(tab3, !(SV == "DEL" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
View(tab3)
tab4 <- subset(tab3, !(ALL == "DEL" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
#==============================================================================#
#            IMPORTANTE           ####
# APLICAR FILTRO PARA DUP, INV e INS ?
tab4 <- subset(tab4, !(SV == "DUP" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
#==============================================================================#
#            IMPORTANTE           ####
# APLICAR FILTRO PARA DUP, INV e INS ?
tab4 <- subset(tab4, !(ALL == "DUP" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
tab4 <- subset(tab4, !(ALL == "INS" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
tab4 <- subset(tab4, !(ALL == "INV" & Func.refGene %in% c("intronic","intergenic","UTR3","UTR5","upstream;downstream","ncRNA_intronic","UTR5;UTR3","upstream" )))
table(tab3$ALL,tab3$Func.refGene)
table(tab4$ALL,tab4$Func.refGene)
table(tab4$ALL)
# BND  DEL  DUP  INV
# 48  119   26 2914
table(tab4$SAMPLE,tab4$ALL)
tab.count <- data.frame(table(tab4$SAMPLE,tab4$ALL))
tab.count<- as.data.frame(reshape2::dcast(tab.count, Var1 ~ Var2,  value.var = "Freq"))
tab.count$ALL <- rowSums(tab.count[,c(2:5)])
tab.count
sum(tab.count$ALL) #3152
fwrite(tab4, paste0(output,"/tabela_all.SVs.tsv"), quote = F, sep="\t")
fwrite(tab.count, paste0(output,"/tabela_count.SVs.tsv"), quote = F, sep="\t")
#==============================================================================#
# CARREGANDO DADOS DO MUTECT2 E DADOS CLINICOS ####
#==============================================================================#
# carregando dados do Mutect2
#==============================================================================#
dgenes<-fread("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/input_somatic.69-Filter/driver-genes.txt",
header = F, col.names = "gene")
dMMR <- fread("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/input_somatic_Filter/dMMR_genes.txt",
header = F, col.names = "gene")
dMMR <- fread("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/input_Somatic-Filter/dMMR_genes.txt",
header = F, col.names = "gene")
somatic.69<-fread("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/output-Mutect2_somaticFilters.2023-09-26/somatic_mutation.69samples.tsv",
header = T,  na.strings=c("NA"), fill=TRUE, check.names = FALSE)
somatic.69<- somatic.69 %>%
mutate(Gene.refGene = strsplit(as.character(Gene.refGene), ";")) %>%
unnest(Gene.refGene)
somatic_Samples<- fread("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/output-Mutect2_SomaticFilters.2023-09-26/MATH_TMB-SAMPLES.tsv",
header = T,  na.strings=c("NA"), fill=TRUE, check.names = FALSE)
somatic_Samples<-subset(somatic_Samples, (SAMPLE %in% somatic.69$SAMPLE) )
#==============================================================================#
# Carregando tabela de dados Clinicos ####
#==============================================================================#
Clinical <- read.xlsx("D:/PROJETOS-HSL_BP/resultados_Mutect2-2023/Dados Clinicos JP final  - Dez2022 - FILTRADO.xlsx",
sheetIndex = 1, header = T)
Clinical<- Clinical[rowSums(is.na(Clinical)) != ncol(Clinical), -c(6)]
## Renomeando desfeichos clinicos ####
#==============================================================================#
Clinical$Response1 <- gsub("Completa", "nCRT-R" , Clinical$Resposta)
Clinical$Response1 <- gsub("Incompleta", "nCRT-NR" , Clinical$Response1)
Clinical$Response2 <- gsub("Completa", "nCRT-R" , Clinical$Resposta2)
Clinical$Response2 <- gsub("Incompleta Sem Metastase", "nCRT-NR Not-Metastatic" , Clinical$Response2)
Clinical$Response2 <- gsub("Incompleta Com Metastase", "nCRT-NR Metastatic" , Clinical$Response2)
Clinical$Response3 <- gsub("nao metastatico", "Not-Metastatic" , Clinical$Resposta3)
Clinical$Response3 <- gsub("metastatico", "Metastatic" , Clinical$Response3)
#==============================================================================#
## Selecionando amostas do Exoma
Clinical <- Clinical[Clinical$WXS== "Y",]
## Listras de amostras excluidas pelo corpo clinico
samples.excl <- c("ROP-116","ROP-118","ROP-120","ROP-121","ROP-122","ROP-123","ROP-125","ROP-126",
"ROP-127","ROP-130","ROP-131","ROP-132","ROP-23","ROP-84", "ROP-129","ROP-81","ROP-91")
## Excluindo amostras excluidas pelo corpo clinico
Clinical <- subset(Clinical, !(ID_Exoma %in% samples.excl) )
somatic.69_Clinical <- merge(somatic_Samples, Clinical, by.x = "SAMPLE", by.y = "Sample")
somatic.69_Clinical$dMMR <-"sem_dMMR"
mutados<- unique(subset(somatic.69, class == "dMMR", select = ID_Exoma))
somatic.69_Clinical[somatic.69_Clinical$ID_Exoma %in% mutados$ID_Exoma]$dMMR <-"com_dMMR"
# CARREGANDO INFORMAÇÕES DE SVs
#===================================#
fwrite(tab.count, paste0(output,"/tabela_count.SVs.tsv"), quote = F, sep="\t")
sv<- fread(file=paste0(output,"/tabela_count.SVs.tsv"), header=T, sep="\t", fill=TRUE, check.names = FALSE)
sv<- as.data.frame(sv)
sv<-sv %>%
mutate_all(replace_na, 0)
somatic.69_Clinical.sv <- somatic.69_Clinical
somatic.69_Clinical <- merge( somatic.69_Clinical, sv, by.x = "SAMPLE", by.y = "Var1", all.x = T)
somatic.69_Clinical$ALL[is.na(somatic.69_Clinical$ALL)] <- 0
somatic.69_Clinical$BND[is.na(somatic.69_Clinical$BND)] <- 0
somatic.69_Clinical$DEL[is.na(somatic.69_Clinical$DEL)] <- 0
somatic.69_Clinical$DUP[is.na(somatic.69_Clinical$DUP)] <- 0
somatic.69_Clinical$INV[is.na(somatic.69_Clinical$INV)] <- 0
somatic.69_Clinical$status_SV <- "sem SV"
somatic.69_Clinical[somatic.69_Clinical$ALL > 0, "status_SV"] <- "com SV"
aux <-somatic.69_Clinical
print(table(aux$Resposta))
print(as.matrix(table(aux[,c("status_SV", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status_SV", "Resposta")]), nr=2)
print(chisq.test(dt3))
print(fisher.test(dt3))
print(table(aux$Resposta2))
print(as.matrix(table(aux[,c("status_SV", "Resposta2")]), nr=2))
dt3<- matrix(table(aux[,c("status_SV", "Resposta2")]), nr=2)
print(chisq.test(dt3))
print(fisher.test(dt3))
print(table(aux$Resposta3))
print(as.matrix(table(aux[,c("status_SV", "Resposta3")]), nr=2))
dt3<- matrix(table(aux[,c("status_SV", "Resposta3")]), nr=2)
print(chisq.test(dt3))
print(fisher.test(dt3))
#==============================================================================
svEvents <-c("INV","DUP","DEL","BND","INS")
aux <-somatic.69_Clinical
View(aux)
cat(event,"teste")
event="INV"
cat(event,"teste")
aux$status <- paste0("sem ",event)
View(aux)
aux[aux$`event` > 0, "status"] <- paste0("sem ",event)
View(aux)
View(aux)
aux$status <- paste0("sem ",event)
aux[aux$`event` > 0, "status"] <- paste0("com ",event)
aux[aux$`event` > 0, "status"] <- paste0("com ",event)
View(aux)
aux[,aux$`event`]
aux[,aux$`event`]
aux[,aux$INV]
event
event[]
event[0]
event[1]
aux[,aux$event[1]]
numero_coluna <- which(colnames(aux) == event)
print(numero_coluna)
aux[,c(44)]
aux[,c(44)]
aux[c(44) > 0, "status"] <- paste0("com ",event)
View(aux)
aux[c(44) > 0, "status"]
aux[c(44) > 0,]
View(aux[c(44) > 0,])
View(aux[aux$INV > 0,])
View(aux[aux$[c(44)] > 0,])
View(aux[aux$[,c(44)] > 0,])
View(aux[aux[,c(44)] > 0,])
aux$`event`
event
aux[,c(44)]
View(aux[aux$INV > 0,])
View(aux[,c(44) > 0])
aux[,c(44) > 0]
View(aux[,c(44) ])
View(aux[,c(44) ] >0)
View(aux[,aux[,c(44)]>0])
View(aux[aux[,c(44)]>0])
View(aux[aux[,c(44)]>0,])
View(somatic.69_Clinical)
View(aux)
aux1<- subset(aux, select = c(1:40,event))
aux1<- subset(aux, select = c(1:40,event))
event
aux1<- subset(aux, select = c(event))
View(aux1)
colnames(aux1) <- "SV"
View(aux1)
View(aux1)
aux1$status <- "sem SV"
aux1[aux$SV > 0, "status"] <- "com SV"
View(aux1)
aux1$status <- "sem SV"
aux1[aux$SV > 0, "status"] <- "com SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux1<- subset(aux, select = c(1:40,event))
aux <-somatic.69_Clinical
View(aux)
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
View(aux1)
aux$status <-aux1$status
View(aux)
print(table(aux$Resposta))
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
print(fisher.test(dt3))
dt3
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.05)||(valor_p1 <= 0.05)){
print("=============================================================")
print(sv)
print(resp)
print(as.matrix(table(subset(aux, select = c(sv, resp))), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
if((valor_p <= 1.05)||(valor_p1 <= 1.05)){
print("=============================================================")
print(sv)
print(resp)
print(as.matrix(table(subset(aux, select = c(sv, resp))), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
print(sv)
print(sv)
print(event)
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
print(resultado)
print(as.matrix(dt3)
print("=============================================================")
print(as.matrix(dt))
print((dt))
print(as.matrix(dt3))
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print(resultado)
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print(table(aux$Resposta))
#==============================================================================
svEvents <-c("INV","DUP","DEL","BND","INS")
aux <-somatic.69_Clinical
for (event in svEvents) {
numero_coluna <- which(colnames(aux) == event)
print(numero_coluna)
event="INV"
cat(event,"teste")
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux$status <-aux1$status
print(table(aux$Resposta))
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
#print(fisher.test(dt3))
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.05)||(valor_p1 <= 0.05)){
print("=============================================================")
print(event)
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
for (event in svEvents) {
cat(event,"teste")
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux$status <-aux1$status
print(table(aux$Resposta))
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
#print(fisher.test(dt3))
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.05)||(valor_p1 <= 0.05)){
print("=============================================================")
print(event)
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
#==============================================================================
svEvents <-c("INV","DUP","DEL","BND","INS")
aux <-somatic.69_Clinical
for (event in svEvents) {
cat(event,"teste")
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux$status <-aux1$status
print(table(aux$Resposta))
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
#print(fisher.test(dt3))
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.05)||(valor_p1 <= 0.05)){
print("=============================================================")
print(event)
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
print(table(aux$Resposta))
for (event in svEvents) {
cat(event,"teste")
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux$status <-aux1$status
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
#print(fisher.test(dt3))
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.5)||(valor_p1 <= 0.5)){
print("=============================================================")
print(event)
print(table(aux$Resposta))
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
#==============================================================================
svEvents <-c("INV","DUP","DEL","BND")
aux <-somatic.69_Clinical
for (event in svEvents) {
cat(event,"teste")
aux$status <- paste0("sem ",event)
aux1<- subset(aux, select = c(event))
colnames(aux1) <- "SV"
aux1$status <- "sem SV"
aux1[aux1$SV > 0, "status"] <- "com SV"
aux$status <-aux1$status
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Resposta")]), nr=2)
#print(fisher.test(dt3))
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.5)||(valor_p1 <= 0.5)){
print("=============================================================")
print(event)
print(table(aux$Resposta))
print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
respostas <- c("Response1", "Response2", "Response3")
resp="Resposta2"
resp="Response2"
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", resp)]), nr=2)
#print(fisher.test(dt3))
dt3
#print(as.matrix(table(aux[,c("status", "Resposta")]), nr=2))
dt3<- matrix(table(aux[,c("status", "Response2")]), nr=2)
#print(fisher.test(dt3))
dt3
aux <-somatic.69_Clinical
aux$status_INV <- "sem_SV"
aux$status_DUP <- "sem_SV"
aux$status_DEL <- "sem_SV"
aux$status_BND <- "sem_SV"
aux[aux$INV >0, ]$status_INV <- "com_SV"
aux[aux$DUP >0, ]$status_DUP <- "com_SV"
aux[aux$DEL >0, ]$status_DEL <- "com_SV"
aux[aux$BND >0, ]$status_BND <- "com_SV"
aux <-aux
eventos_SV <- c("status_SV","status_INV","status_DUP","status_DEL","status_BND")
for (sv in eventos_SV) {
for (resp in respostas) {
# sv="status_SV"
# resp= "Response1"
dt3<- matrix(table(subset(aux, select = c(sv, resp))), nr=2)
dt3
if(ncol(dt3)>1){
resultado<-fisher.test(dt3)
resultado1<-chisq.test(dt3)
valor_p <- resultado$p.value
valor_p1 <- resultado1$p.value
if((valor_p <= 0.05)||(valor_p1 <= 0.05)){
print("=============================================================")
print(sv)
print(resp)
print(as.matrix(table(subset(aux, select = c(sv, resp))), nr=2))
print("=============================================================")
print(resultado)
print("=============================================================")
print(chisq.test(dt3))
print("=============================================================")
}
}
}
}
